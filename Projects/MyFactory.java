package Projects;

import Projects.impl.*;


import java.util.Collection;

import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;

import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: MyFactory<br>
 * @version generated on Mon Dec 04 20:34:43 COT 2017 by alvarfr
 */
public class MyFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public MyFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public MyFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Analyst
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Analyst", Analyst.class, DefaultAnalyst.class);
    }

    /**
     * Creates an instance of type Analyst.  Modifies the underlying ontology.
     */
    public Analyst createAnalyst(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_ANALYST, DefaultAnalyst.class);
    }

    /**
     * Gets an instance of type Analyst with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Analyst getAnalyst(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_ANALYST, DefaultAnalyst.class);
    }

    /**
     * Gets all instances of Analyst from the ontology.
     */
    public Collection<? extends Analyst> getAllAnalystInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_ANALYST, DefaultAnalyst.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Applications
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Applications", Applications.class, DefaultApplications.class);
    }

    /**
     * Creates an instance of type Applications.  Modifies the underlying ontology.
     */
    public Applications createApplications(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_APPLICATIONS, DefaultApplications.class);
    }

    /**
     * Gets an instance of type Applications with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Applications getApplications(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_APPLICATIONS, DefaultApplications.class);
    }

    /**
     * Gets all instances of Applications from the ontology.
     */
    public Collection<? extends Applications> getAllApplicationsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_APPLICATIONS, DefaultApplications.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Changes
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Changes", Changes.class, DefaultChanges.class);
    }

    /**
     * Creates an instance of type Changes.  Modifies the underlying ontology.
     */
    public Changes createChanges(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHANGES, DefaultChanges.class);
    }

    /**
     * Gets an instance of type Changes with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Changes getChanges(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHANGES, DefaultChanges.class);
    }

    /**
     * Gets all instances of Changes from the ontology.
     */
    public Collection<? extends Changes> getAllChangesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHANGES, DefaultChanges.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ChangesState
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ChangesState", ChangesState.class, DefaultChangesState.class);
    }

    /**
     * Creates an instance of type ChangesState.  Modifies the underlying ontology.
     */
    public ChangesState createChangesState(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHANGESSTATE, DefaultChangesState.class);
    }

    /**
     * Gets an instance of type ChangesState with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ChangesState getChangesState(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHANGESSTATE, DefaultChangesState.class);
    }

    /**
     * Gets all instances of ChangesState from the ontology.
     */
    public Collection<? extends ChangesState> getAllChangesStateInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHANGESSTATE, DefaultChangesState.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ClosedChanges
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ClosedChanges", ClosedChanges.class, DefaultClosedChanges.class);
    }

    /**
     * Creates an instance of type ClosedChanges.  Modifies the underlying ontology.
     */
    public ClosedChanges createClosedChanges(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLOSEDCHANGES, DefaultClosedChanges.class);
    }

    /**
     * Gets an instance of type ClosedChanges with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ClosedChanges getClosedChanges(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLOSEDCHANGES, DefaultClosedChanges.class);
    }

    /**
     * Gets all instances of ClosedChanges from the ontology.
     */
    public Collection<? extends ClosedChanges> getAllClosedChangesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLOSEDCHANGES, DefaultClosedChanges.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ClosedIncidents
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ClosedIncidents", ClosedIncidents.class, DefaultClosedIncidents.class);
    }

    /**
     * Creates an instance of type ClosedIncidents.  Modifies the underlying ontology.
     */
    public ClosedIncidents createClosedIncidents(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLOSEDINCIDENTS, DefaultClosedIncidents.class);
    }

    /**
     * Gets an instance of type ClosedIncidents with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ClosedIncidents getClosedIncidents(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLOSEDINCIDENTS, DefaultClosedIncidents.class);
    }

    /**
     * Gets all instances of ClosedIncidents from the ontology.
     */
    public Collection<? extends ClosedIncidents> getAllClosedIncidentsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLOSEDINCIDENTS, DefaultClosedIncidents.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ClosedWorkOrders
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ClosedWorkOrders", ClosedWorkOrders.class, DefaultClosedWorkOrders.class);
    }

    /**
     * Creates an instance of type ClosedWorkOrders.  Modifies the underlying ontology.
     */
    public ClosedWorkOrders createClosedWorkOrders(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CLOSEDWORKORDERS, DefaultClosedWorkOrders.class);
    }

    /**
     * Gets an instance of type ClosedWorkOrders with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ClosedWorkOrders getClosedWorkOrders(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CLOSEDWORKORDERS, DefaultClosedWorkOrders.class);
    }

    /**
     * Gets all instances of ClosedWorkOrders from the ontology.
     */
    public Collection<? extends ClosedWorkOrders> getAllClosedWorkOrdersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CLOSEDWORKORDERS, DefaultClosedWorkOrders.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Incidents
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Incidents", Incidents.class, DefaultIncidents.class);
    }

    /**
     * Creates an instance of type Incidents.  Modifies the underlying ontology.
     */
    public Incidents createIncidents(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_INCIDENTS, DefaultIncidents.class);
    }

    /**
     * Gets an instance of type Incidents with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Incidents getIncidents(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_INCIDENTS, DefaultIncidents.class);
    }

    /**
     * Gets all instances of Incidents from the ontology.
     */
    public Collection<? extends Incidents> getAllIncidentsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_INCIDENTS, DefaultIncidents.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ManagedChanges
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ManagedChanges", ManagedChanges.class, DefaultManagedChanges.class);
    }

    /**
     * Creates an instance of type ManagedChanges.  Modifies the underlying ontology.
     */
    public ManagedChanges createManagedChanges(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_MANAGEDCHANGES, DefaultManagedChanges.class);
    }

    /**
     * Gets an instance of type ManagedChanges with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ManagedChanges getManagedChanges(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_MANAGEDCHANGES, DefaultManagedChanges.class);
    }

    /**
     * Gets all instances of ManagedChanges from the ontology.
     */
    public Collection<? extends ManagedChanges> getAllManagedChangesInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_MANAGEDCHANGES, DefaultManagedChanges.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#NotScheduledTasks
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#NotScheduledTasks", NotScheduledTasks.class, DefaultNotScheduledTasks.class);
    }

    /**
     * Creates an instance of type NotScheduledTasks.  Modifies the underlying ontology.
     */
    public NotScheduledTasks createNotScheduledTasks(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_NOTSCHEDULEDTASKS, DefaultNotScheduledTasks.class);
    }

    /**
     * Gets an instance of type NotScheduledTasks with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public NotScheduledTasks getNotScheduledTasks(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_NOTSCHEDULEDTASKS, DefaultNotScheduledTasks.class);
    }

    /**
     * Gets all instances of NotScheduledTasks from the ontology.
     */
    public Collection<? extends NotScheduledTasks> getAllNotScheduledTasksInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_NOTSCHEDULEDTASKS, DefaultNotScheduledTasks.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Projects
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Projects", Projects.class, DefaultProjects.class);
    }

    /**
     * Creates an instance of type Projects.  Modifies the underlying ontology.
     */
    public Projects createProjects(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_PROJECTS, DefaultProjects.class);
    }

    /**
     * Gets an instance of type Projects with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Projects getProjects(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_PROJECTS, DefaultProjects.class);
    }

    /**
     * Gets all instances of Projects from the ontology.
     */
    public Collection<? extends Projects> getAllProjectsInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_PROJECTS, DefaultProjects.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ScheduledTasks
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#ScheduledTasks", ScheduledTasks.class, DefaultScheduledTasks.class);
    }

    /**
     * Creates an instance of type ScheduledTasks.  Modifies the underlying ontology.
     */
    public ScheduledTasks createScheduledTasks(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_SCHEDULEDTASKS, DefaultScheduledTasks.class);
    }

    /**
     * Gets an instance of type ScheduledTasks with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public ScheduledTasks getScheduledTasks(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_SCHEDULEDTASKS, DefaultScheduledTasks.class);
    }

    /**
     * Gets all instances of ScheduledTasks from the ontology.
     */
    public Collection<? extends ScheduledTasks> getAllScheduledTasksInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_SCHEDULEDTASKS, DefaultScheduledTasks.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Tasks
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Tasks", Tasks.class, DefaultTasks.class);
    }

    /**
     * Creates an instance of type Tasks.  Modifies the underlying ontology.
     */
    public Tasks createTasks(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_TASKS, DefaultTasks.class);
    }

    /**
     * Gets an instance of type Tasks with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Tasks getTasks(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_TASKS, DefaultTasks.class);
    }

    /**
     * Gets all instances of Tasks from the ontology.
     */
    public Collection<? extends Tasks> getAllTasksInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_TASKS, DefaultTasks.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Users
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#Users", Users.class, DefaultUsers.class);
    }

    /**
     * Creates an instance of type Users.  Modifies the underlying ontology.
     */
    public Users createUsers(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_USERS, DefaultUsers.class);
    }

    /**
     * Gets an instance of type Users with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Users getUsers(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_USERS, DefaultUsers.class);
    }

    /**
     * Gets all instances of Users from the ontology.
     */
    public Collection<? extends Users> getAllUsersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_USERS, DefaultUsers.class);
    }


    /* ***************************************************
     * Class http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#WorkOrders
     */

    {
        javaMapping.add("http://www.semanticweb.org/alvarfr/ontologies/2017/11/untitled-ontology-6#WorkOrders", WorkOrders.class, DefaultWorkOrders.class);
    }

    /**
     * Creates an instance of type WorkOrders.  Modifies the underlying ontology.
     */
    public WorkOrders createWorkOrders(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_WORKORDERS, DefaultWorkOrders.class);
    }

    /**
     * Gets an instance of type WorkOrders with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public WorkOrders getWorkOrders(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_WORKORDERS, DefaultWorkOrders.class);
    }

    /**
     * Gets all instances of WorkOrders from the ontology.
     */
    public Collection<? extends WorkOrders> getAllWorkOrdersInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_WORKORDERS, DefaultWorkOrders.class);
    }


}
